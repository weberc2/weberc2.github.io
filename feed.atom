<feed xmlns="http://www.w3.org/2005/Atom"><title>Craig Weber</title><id>http://localhost:8000/index.html</id><updated>2021-04-20T00:26:07.031128+00:00</updated><link href="http://localhost:8000/index.html" rel="alternate"/><entry><title>Working around ext4 on MacOS</title><id>http://localhost:8000/posts/working-around-ext4-on-macos.html</id><updated>2021-01-23T00:00:00+00:00</updated><link href="http://localhost:8000/posts/working-around-ext4-on-macos.html" rel="alternate"/><published>2021-01-23T00:00:00+00:00</published><summary><p>One of the maddening things about MacOS is that it lacks ext4 file system
support. This is a bummer because I use ext4 on many of my external hard
drives as well as boot volumes for various headless Linux machines. Once in a
while, these boot drives become corrupted (due to user error) and I find myself
wanting to mount the file system on another system to repair the error. Ideally
I can just pop it in a SATA&lt;-&gt;USB adapter and mount it on my Mac, but alas…</p></summary></entry><entry><title>Changelog</title><id>http://localhost:8000/posts/changelog.html</id><updated>2021-01-16T00:00:00+00:00</updated><link href="http://localhost:8000/posts/changelog.html" rel="alternate"/><published>2021-01-16T00:00:00+00:00</published><summary><p>I worked on this blog for several hours this weekend, releasing a new post,
implementing a couple new features and fixing some bugs. Here are the
highlights:</p><ul><li>Published the <a href="./homelab-part-i-hardware.md" title="">first entry</a> in my <a href="./homelab-intro.md" title="">Homelab</a> series</li><li>Fixed a bug on iPad that was causing a ~300% zoom</li><li>Implemented syndication (atom feed)</li><li>Fixed broken relative links in post snippets</li><li>Reduced coupling between markdown and site configuration</li></ul></summary></entry><entry><title>Homelab Part I: Hardware</title><id>http://localhost:8000/posts/homelab-part-i-hardware.html</id><updated>2021-01-14T00:00:00+00:00</updated><link href="http://localhost:8000/posts/homelab-part-i-hardware.html" rel="alternate"/><published>2021-01-14T00:00:00+00:00</published><summary><p>For hardware, I settled on Raspberry Pi 4Bs. They support up to 8GB of RAM
(enough power to run the k3s master nodes) and USB 3.0 for fast external SSD
I/O. The only downside of the 4Bs is that they require more power than the 3Bs,
and the same multiport USB power supplies that could support a 3B cluster
couldn’t support a 4B cluster. To solve for this, I decided on PoE hats and a
PoE switch. This halves the number of cables that need to be run to each Pi,
which makes the Pi cluster that much more enjoyable and easy on the eyes.</p></summary></entry><entry><title>Force RGB-mode (fix pink tint) in macOS in 3 easy steps</title><id>http://localhost:8000/posts/macos-force-rgb.html</id><updated>2021-01-04T00:00:00+00:00</updated><link href="http://localhost:8000/posts/macos-force-rgb.html" rel="alternate"/><published>2021-01-04T00:00:00+00:00</published><summary><p>For whatever reason, macOS Catalina and Big Sur were both tinting my external
monitor pink. Some research indicated that it had to do with the color mode,
notably that I needed to force RGB. MacOS’s UI doesn’t give the user the
ability to change the color mode directly, so you have to hack around the
display profile files directly.</p><p><a href="https://www.mathewinkson.com/2013/03/force-rgb-mode-in-mac-os-x-to-fix-the-picture-quality-of-an-external-monitor" title="">This post</a> and its comments from 2013 seem to be the authoritative guide on
forcing RGB mode; however, these steps (and the variations found in the
comments) make you do a lot of things, including disabling the System Integrity
Protection (basically the stuff that prevents even the super user from changing
certain files and directories), booting into recovery mode, changing boot files
(which can put your system into a boot loop, as I discovered the hard way), and
a number of other dangerous, arcane things.</p><p>Fortunately, I found a sequence that is much safer and easier (tested on both
Big Sur and Catalina on two distinct MacBook Pros):</p></summary></entry><entry><title>Kubernetes + Raspberry Pi Homelab: Introduction</title><id>http://localhost:8000/posts/homelab-intro.html</id><updated>2021-01-03T00:00:00+00:00</updated><link href="http://localhost:8000/posts/homelab-intro.html" rel="alternate"/><published>2021-01-03T00:00:00+00:00</published><summary><p>As I alluded to in my <a href="./k3s-tailscale.md" title="">last post</a>, I’ve finally decided to pull the trigger
and build my own homelab: a personal computing environment for playing around
with new tools and approaches for developing or operating software, including
software that is personally useful.</p><p>For my homelab, I want to build a Raspberry Pi Kubernetes cluster for hosting
my own applications and experimenting with different tools and approaches for
operating software. However, bare metal (i.e., not running on a public cloud
provider, such as AWS) is a second-class citizen for Kubernetes, so one must
bring their own providers for storage, networking, load balancing, ingress
(roughly “HTTP/layer-7 routing”), and much more.</p><p>One day, I have no doubt that there will be Kubernetes distributions targeting
bare metal which are mature, robust, and open source; in the meanwhile, this
series will document my efforts to work around those limitations so that others
can build their own personal cloud platform more easily (or at least know what
they’re considering getting into!).</p><p>Next time, I’ll delve into the hardware I’m using for my cluster.</p><ul><li><a href="./homelab-part-i-hardware.md" title="">Part I: Hardware</a></li></ul></summary></entry><entry><title>K3s + Tailscale</title><id>http://localhost:8000/posts/k3s-tailscale.html</id><updated>2020-12-30T00:00:00+00:00</updated><link href="http://localhost:8000/posts/k3s-tailscale.html" rel="alternate"/><published>2020-12-30T00:00:00+00:00</published><summary><p>I’ve recently been working on my Raspberry Pi Kubernetes cluster. I also use
<a href="https://tailscale.com/" title="">Tailscale</a> for my home VPN (because it’s performant and absurdly easy to
setup and configure). I wanted to run Kubernetes services on my VPN using
private DNS names (e.g., <code>foo.local</code>) and addresses from the Tailscale address
space (e.g., <code>100.*</code>) as opposed to the host network address space (e.g.,
<code>192.168.*</code>).</p></summary></entry><entry><title>Go generics iterator sketch</title><id>http://localhost:8000/posts/golang-iterator-sketch.html</id><updated>2020-06-17T00:00:00+00:00</updated><link href="http://localhost:8000/posts/golang-iterator-sketch.html" rel="alternate"/><published>2020-06-17T00:00:00+00:00</published><summary><p>The new Go generics proposal and playground gives us something to play with.
Here’s a sketch of what a basic iterator library could look like. It’s based on
function types instead of interfaces; I think this gives better ergonomics than
interface-based designs, especially if the proposal drops its seemingly
arbitrary <a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-type-parameters.md#methods-may-not-take-additional-type-arguments" title="">restrictions for method types</a>.</p><p>I’m not sure about returning a pointer to the type as opposed to a <code>(T, bool)</code>
tuple. In particular, I suspect this will cause unnecessary allocations, but I
haven’t tested at all.</p></summary></entry><entry><title>Tips for working with multiple GitHub accounts</title><id>http://localhost:8000/posts/multiple-github-account-tips.html</id><updated>2020-04-25T00:00:00+00:00</updated><link href="http://localhost:8000/posts/multiple-github-account-tips.html" rel="alternate"/><published>2020-04-25T00:00:00+00:00</published><summary><p>I use GitHub for my work and personal projects with different profiles for
each. Because it’s a good security/privacy practice, each profile has its
own distinct SSH key. However, this causes problems because the <code>git</code> CLI
will always try to use the first SSH key that maps to the <code>github.com</code>
domain even if that key has no permissions for the target repository. The
other more straightforward problem with multiple accounts is that the
GitHub.com browser cookie asserts that you are only logged into one account
at a time.</p><p>My solutions for these problems are <a href="https://direnv.net/" title=""><code>direnv</code></a> and <a href="https://support.mozilla.org/en-US/kb/containers" title="">Firefox
Containers</a>, respectively. These use cases are straightforward
applications of these technologies, so I’m not claiming any innovation here,
but rather it took me a long time to identify these solutions, and I hope
this saves others some time. If you’re not familiar with these tools, read
on for details.</p></summary></entry><entry><title>5 myths about infrastructure-as-code via general purpose programming languages
</title><id>http://localhost:8000/posts/5-myths-infra-as-code.html</id><updated>2020-04-15T00:00:00+00:00</updated><link href="http://localhost:8000/posts/5-myths-infra-as-code.html" rel="alternate"/><published>2020-04-15T00:00:00+00:00</published><summary><p>There’s an ongoing debate among infrastructure-as-code practitioners between
configuration languages like YAML and HCL and using “real programming
languages” (including domain specific programming languages) to generate
configuration. The debate is going very poorly because there is a lot
of confusion about the “real programming languages” position, so I want to
correct some of the common points of confusion (“myths”) so the conversation
can focus on more substantial concerns.</p></summary></entry><entry><title>Blog infrastructure updates</title><id>http://localhost:8000/posts/blog-infra-updates.html</id><updated>2020-03-28T00:00:00+00:00</updated><link href="http://localhost:8000/posts/blog-infra-updates.html" rel="alternate"/><published>2020-03-28T00:00:00+00:00</published><summary><p>Another year, another blog update. BitBucket is deprecating their Mercurial
support, and while I really do appreciate Mercurial, it’s just easier for me to
keep everything in GitHub than trying to find another Mercurial provider. Also,
GitHub seems to be improving at a pretty rapid pace. So voila, this blog is now
hosted on GitHub. This includes my pet static site generator, <a href="https://github.com/weberc2/neon" title=""><code>neon</code></a> which
is used to generate this site.</p><p>Further, my pet build tool <a href="https://github.com/weberc2/builder" title=""><code>builder</code></a> is sufficiently far along that I
can use it to automate the building of this static site. <code>builder</code> is pretty
cool so far. At some point I will write a dedicated post about it.</p></summary></entry><entry><title>New blog infrastructure</title><id>http://localhost:8000/posts/blog-infrastructure.html</id><updated>2019-04-06T00:00:00+00:00</updated><link href="http://localhost:8000/posts/blog-infrastructure.html" rel="alternate"/><published>2019-04-06T00:00:00+00:00</published><summary><p>I <em>finally</em> got around to automating the publishing of this blog. It hasn’t
been a high priority, since I only post a couple of times a year, but it’s
always bothered me that something that is such an ideal candidate for
automation hasn’t been automated. Anyway, I finally did it and I want to
describe the setup in case it’s helpful for anyone looking to do the same.</p></summary></entry><entry><title>Deploying Go apps on Docker scratch images</title><id>http://localhost:8000/posts/golang-docker-scratch-app.html</id><updated>2018-11-04T00:00:00+00:00</updated><link href="http://localhost:8000/posts/golang-docker-scratch-app.html" rel="alternate"/><published>2018-11-04T00:00:00+00:00</published><summary><p>NOTE: If you’re here for the TL;DR, skip to the bottom.</p><p>A few months ago I built out some monitoring infrastructure at work using Go. I
deployed it to ECS (a Docker orchestrator, functionally similar to Kubernetes),
and for fun I decided to see how minimal I could make the image. I’ve used
Alpine base images before (which weigh in at about 5 MB and usually another 5 MB
for a small Go binary), but being that Go advertises itself as requiring only a
Linux kernel (most programming languages depend on an interpreter, a VM, and/or
system libraries–the latter abstract over kernel functionality and sometimes
provide a stable interface to the kernel), I wanted to see how true or practical
this was, and I wanted to better understand the things that I was taking for
granted by using distros.</p><p>As a matter of context, Docker has a special base image called <code>scratch</code> which
is empty–an application running on a scratch base image only has access to the
kernel (at least to the extent that containers provide isolation).</p></summary></entry><entry><title>Getting started with Go, 2018 edition</title><id>http://localhost:8000/posts/go-getting-started.html</id><updated>2018-10-14T00:00:00+00:00</updated><link href="http://localhost:8000/posts/go-getting-started.html" rel="alternate"/><published>2018-10-14T00:00:00+00:00</published><summary><p>A little over 2.5 years ago, I wrote a tutorial about <a href="./installing-go-on-linux-and-osx.md" title="">installing Go</a>. Since
then, one of the more significant changes to the Go ecosystem has been the
addition of <a href="https://github.com/golang/go/wiki/Modules" title="">modules</a>, which effectively does away with the hardest part of
installing Go–<code>$GOPATH</code>. This change occurred in the latest version: Go 1.11.</p><p>In addition to installing Go, I wanted to make a guide that can get you from
nothing to a real project in half an hour. Most languages focus their
introductory material on the language and briefly cover setting up a toy
program. When you’re done, you realize you have no idea how to build a
multi-file program, how to add dependencies (or at least how to add them in a
way that won’t break other things on your system), how to get an editor up
and running, etc.</p><p>I’m not going to focus much at all on Go the language here, since it’s super
easy to learn and there are already many great tutorials (the official
<a href="https://tour.golang.org" title="">Tour</a> is probably not a bad place to start). I’m only going to go deep
enough to give you a lay of the land; if I’ve done my job, it should be easy
enough to Google for specific resources on any given topic (for example,
testing).</p><p>Now without further ado…</p></summary></entry><entry><title>Go's interfaces and nil by example</title><id>http://localhost:8000/posts/golang-interfaces-and-nil.html</id><updated>2016-10-30T00:00:00+00:00</updated><link href="http://localhost:8000/posts/golang-interfaces-and-nil.html" rel="alternate"/><published>2016-10-30T00:00:00+00:00</published><summary><p>I’ve recently been involved in conversations with a few Go developers who have
expressed frustration about Go’s interfaces with respect to nil. It seems not
everyone understands that interfaces are a reference type (like a pointer), and
they can reference other reference types (i.e., pointers, maps, slices, etc).
Because all reference types have a nil (zero) value, an interface can be nil
or an interface can reference a nil pointer; people may fail to realize that
the nility of the interface is independent from the nility of the thing it
points to, and when we ask (for example) <code>if err != nil</code>, we’re actually asking
<em>is the interface nil?</em>, not <em>is the value behind the interface nil?</em>. Here are
a few examples that will (<em>hopefully</em>) demonstrate this clearly:</p></summary></entry><entry><title>Benchmarking Go and Python</title><id>http://localhost:8000/posts/benchmarking-go-and-python.html</id><updated>2016-02-06T00:00:00+00:00</updated><link href="http://localhost:8000/posts/benchmarking-go-and-python.html" rel="alternate"/><published>2016-02-06T00:00:00+00:00</published><summary><p>Sometimes I’m curious about the performance of different languages. At work, I
usually write Python, but I often find tasks that are inherently parallelizable
and could thus benefit from parallel execution. Unfortunately, Python is
notoriously difficult to parallelize<sup class="footnote-reference"><a href="http://localhost:8000/posts/benchmarking-go-and-python.html#a">a</a></sup>. In one case, we needed to validate
that a table of values of a particular type could be convertible into a values
of a different type based on some known set of conversion rules. Since Go is a
great language for writing concurrent programs (and executing them in
parallel), I decided to compare a sequential Python implementation to
sequential and parallel Go implementations.</p></summary></entry><entry><title>Installing Go on Linux & OS X</title><id>http://localhost:8000/posts/installing-go-on-linux-and-osx.html</id><updated>2016-01-19T00:00:00+00:00</updated><link href="http://localhost:8000/posts/installing-go-on-linux-and-osx.html" rel="alternate"/><published>2016-01-19T00:00:00+00:00</published><summary><p>This is a guide for Unix systems (OS X and Linux), but Windows users shouldn’t
find it too difficult to figure out the equivalent commands for their platform.
I’m not assuming much prior knowledge, but readers should at least be
comfortable navigating around a Unix terminal, and any familiarity with
environment variables is helpful (a quick Google search for “environment
variables” should suffice). Without further ado:</p></summary></entry><entry><title>Software architecture best practices</title><id>http://localhost:8000/posts/software-architecture-best-practices.html</id><updated>2015-09-30T00:00:00+00:00</updated><link href="http://localhost:8000/posts/software-architecture-best-practices.html" rel="alternate"/><published>2015-09-30T00:00:00+00:00</published><summary><p>This is a collection of articles I’ve found about software development
best-practices. I intend to add to it over time, so don’t be surprised if it
changes.</p><p>I’ve known about this blog post for a couple years, and I find myself frequently
referring people to it. It’s written by a Google engineer who does a much better
job of articulating good architecture techniques than I could. A must-read for
any software developer: <a href="http://googletesting.blogspot.com/2008/08/by-miko-hevery-so-you-decided-to.html" title="">Writing Testable Code by Misko Hevery</a></p><p>This next post is something I just came across, but it does a really good job
explaining why writing testable code is not just about validating your code’s
functionality. Because it’s something I run into a lot in dynamic languages like
Python or Qt/C++, I would also add that hacky workarounds (like Python’s
<code>unittest.mock.patch()</code>) exist that let you technically validate your code
without actually writing what is considered to be well-designed, testable code.
Without furhter ado: <a href="http://openmymind.net/2010/8/17/Write-testable-code-even-if-you-dont-write-tests/" title="">Write testable code even if you don’t write tests</a> by
Karl Seguin.</p></summary></entry></feed>